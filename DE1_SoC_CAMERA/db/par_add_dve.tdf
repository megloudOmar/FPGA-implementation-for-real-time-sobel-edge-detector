--parallel_add DEVICE_FAMILY="Cyclone V" MSW_SUBTRACT="NO" PIPELINE=2 REPRESENTATION="SIGNED" RESULT_ALIGNMENT="LSB" SHIFT=0 SIZE=8 WIDTH=3 WIDTHR=6 clock data result
--VERSION_BEGIN 15.0 cbx_cycloneii 2015:04:22:18:04:07:SJ cbx_lpm_add_sub 2015:04:22:18:04:07:SJ cbx_mgl 2015:04:22:18:06:50:SJ cbx_padd 2015:04:22:18:04:08:SJ cbx_parallel_add 2015:04:22:18:04:08:SJ cbx_stratix 2015:04:22:18:04:08:SJ cbx_stratixii 2015:04:22:18:04:08:SJ cbx_util_mgl 2015:04:22:18:04:08:SJ  VERSION_END


-- Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, the Altera Quartus II License Agreement,
--  the Altera MegaCore Function License Agreement, or other 
--  applicable license agreement, including, without limitation, 
--  that your use is for the sole purpose of programming logic 
--  devices manufactured by Altera and sold by Altera or its 
--  authorized distributors.  Please refer to the applicable 
--  agreement for further details.


FUNCTION soft (in)
RETURNS ( out);

--synthesis_resources = lut 44 reg 25 
OPTIONS ALTERA_INTERNAL_OPTION = "{-to dffe1} POWER_UP_LEVEL=LOW;{-to dffe10} POWER_UP_LEVEL=LOW;{-to dffe11} POWER_UP_LEVEL=LOW;{-to dffe12} POWER_UP_LEVEL=LOW;{-to dffe13} POWER_UP_LEVEL=LOW;{-to dffe14} POWER_UP_LEVEL=LOW;{-to dffe15} POWER_UP_LEVEL=LOW;{-to dffe16} POWER_UP_LEVEL=LOW;{-to dffe17} POWER_UP_LEVEL=LOW;{-to dffe18} POWER_UP_LEVEL=LOW;{-to dffe19} POWER_UP_LEVEL=LOW;{-to dffe2} POWER_UP_LEVEL=LOW;{-to dffe20} POWER_UP_LEVEL=LOW;{-to dffe21} POWER_UP_LEVEL=LOW;{-to dffe22} POWER_UP_LEVEL=LOW;{-to dffe23} POWER_UP_LEVEL=LOW;{-to dffe24} POWER_UP_LEVEL=LOW;{-to dffe25} POWER_UP_LEVEL=LOW;{-to dffe3} POWER_UP_LEVEL=LOW;{-to dffe4} POWER_UP_LEVEL=LOW;{-to dffe5} POWER_UP_LEVEL=LOW;{-to dffe6} POWER_UP_LEVEL=LOW;{-to dffe7} POWER_UP_LEVEL=LOW;{-to dffe8} POWER_UP_LEVEL=LOW;{-to dffe9} POWER_UP_LEVEL=LOW";

SUBDESIGN par_add_dve
( 
	clock	:	input;
	data[23..0]	:	input;
	result[5..0]	:	output;
) 
VARIABLE
	add26_result[4..0]	:	WIRE;
	add31_result[4..0]	:	WIRE;
	add36_result[3..0]	:	WIRE;
	add41_result[7..0]	:	WIRE;
	dffe1 : dffe
		WITH (
			power_up = "low"
		);
	dffe10 : dffe
		WITH (
			power_up = "low"
		);
	dffe11 : dffe
		WITH (
			power_up = "low"
		);
	dffe12 : dffe
		WITH (
			power_up = "low"
		);
	dffe13 : dffe
		WITH (
			power_up = "low"
		);
	dffe14 : dffe
		WITH (
			power_up = "low"
		);
	dffe15 : dffe
		WITH (
			power_up = "low"
		);
	dffe16 : dffe
		WITH (
			power_up = "low"
		);
	dffe17 : dffe
		WITH (
			power_up = "low"
		);
	dffe18 : dffe
		WITH (
			power_up = "low"
		);
	dffe19 : dffe
		WITH (
			power_up = "low"
		);
	dffe2 : dffe
		WITH (
			power_up = "low"
		);
	dffe20 : dffe
		WITH (
			power_up = "low"
		);
	dffe21 : dffe
		WITH (
			power_up = "low"
		);
	dffe22 : dffe
		WITH (
			power_up = "low"
		);
	dffe23 : dffe
		WITH (
			power_up = "low"
		);
	dffe24 : dffe
		WITH (
			power_up = "low"
		);
	dffe25 : dffe
		WITH (
			power_up = "low"
		);
	dffe3 : dffe
		WITH (
			power_up = "low"
		);
	dffe4 : dffe
		WITH (
			power_up = "low"
		);
	dffe5 : dffe
		WITH (
			power_up = "low"
		);
	dffe6 : dffe
		WITH (
			power_up = "low"
		);
	dffe7 : dffe
		WITH (
			power_up = "low"
		);
	dffe8 : dffe
		WITH (
			power_up = "low"
		);
	dffe9 : dffe
		WITH (
			power_up = "low"
		);
	sft27a[4..0] : soft;
	sft28a[4..0] : soft;
	sft29a[4..0] : soft;
	sft30a[4..0] : soft;
	sft32a[4..0] : soft;
	sft33a[4..0] : soft;
	sft34a[4..0] : soft;
	sft35a[4..0] : soft;
	sft37a[3..0] : soft;
	sft38a[3..0] : soft;
	sft39a[3..0] : soft;
	sft40a[3..0] : soft;
	sft42a[7..0] : soft;
	sft43a[7..0] : soft;
	sft44a[7..0] : soft;
	sft45a[7..0] : soft;
	aclr	: NODE;
	clken	: NODE;
	w150w[7..0]	: WIRE;
	w74w	: WIRE;

BEGIN 
	add26_result[] = sft27a[].out + sft28a[].out + sft29a[].out;
	add31_result[] = sft32a[].out + sft33a[].out + sft34a[].out;
	add36_result[] = sft37a[].out + sft38a[].out + sft39a[].out;
	add41_result[] = sft42a[].out + sft43a[].out + sft44a[].out;
	dffe1.clk = clock;
	dffe1.clrn = (! aclr);
	dffe1.d = sft45a[0..0].out;
	dffe1.ena = clken;
	dffe10.clk = clock;
	dffe10.clrn = (! aclr);
	dffe10.d = sft30a[2..2].out;
	dffe10.ena = clken;
	dffe11.clk = clock;
	dffe11.clrn = (! aclr);
	dffe11.d = sft35a[2..2].out;
	dffe11.ena = clken;
	dffe12.clk = clock;
	dffe12.clrn = (! aclr);
	dffe12.d = sft40a[2..2].out;
	dffe12.ena = clken;
	dffe13.clk = clock;
	dffe13.clrn = (! aclr);
	dffe13.d = sft45a[3..3].out;
	dffe13.ena = clken;
	dffe14.clk = clock;
	dffe14.clrn = (! aclr);
	dffe14.d = sft30a[3..3].out;
	dffe14.ena = clken;
	dffe15.clk = clock;
	dffe15.clrn = (! aclr);
	dffe15.d = sft35a[3..3].out;
	dffe15.ena = clken;
	dffe16.clk = clock;
	dffe16.clrn = (! aclr);
	dffe16.d = sft40a[3..3].out;
	dffe16.ena = clken;
	dffe17.clk = clock;
	dffe17.clrn = (! aclr);
	dffe17.d = sft45a[4..4].out;
	dffe17.ena = clken;
	dffe18.clk = clock;
	dffe18.clrn = (! aclr);
	dffe18.d = sft30a[4..4].out;
	dffe18.ena = clken;
	dffe19.clk = clock;
	dffe19.clrn = (! aclr);
	dffe19.d = sft35a[4..4].out;
	dffe19.ena = clken;
	dffe2.clk = clock;
	dffe2.clrn = (! aclr);
	dffe2.d = sft30a[0..0].out;
	dffe2.ena = clken;
	dffe20.clk = clock;
	dffe20.clrn = (! aclr);
	dffe20.d = sft45a[5..5].out;
	dffe20.ena = clken;
	dffe21.clk = clock;
	dffe21.clrn = (! aclr);
	dffe21.d = B"1";
	dffe21.ena = clken;
	dffe22.clk = clock;
	dffe22.clrn = (! aclr);
	dffe22.d = sft45a[6..6].out;
	dffe22.ena = clken;
	dffe23.clk = clock;
	dffe23.clrn = (! aclr);
	dffe23.d = B"1";
	dffe23.ena = clken;
	dffe24.clk = clock;
	dffe24.clrn = (! aclr);
	dffe24.d = sft45a[7..7].out;
	dffe24.ena = clken;
	dffe25.clk = clock;
	dffe25.clrn = (! aclr);
	dffe25.d = B"1";
	dffe25.ena = clken;
	dffe3.clk = clock;
	dffe3.clrn = (! aclr);
	dffe3.d = sft35a[0..0].out;
	dffe3.ena = clken;
	dffe4.clk = clock;
	dffe4.clrn = (! aclr);
	dffe4.d = sft40a[0..0].out;
	dffe4.ena = clken;
	dffe5.clk = clock;
	dffe5.clrn = (! aclr);
	dffe5.d = sft45a[1..1].out;
	dffe5.ena = clken;
	dffe6.clk = clock;
	dffe6.clrn = (! aclr);
	dffe6.d = sft30a[1..1].out;
	dffe6.ena = clken;
	dffe7.clk = clock;
	dffe7.clrn = (! aclr);
	dffe7.d = sft35a[1..1].out;
	dffe7.ena = clken;
	dffe8.clk = clock;
	dffe8.clrn = (! aclr);
	dffe8.d = sft40a[1..1].out;
	dffe8.ena = clken;
	dffe9.clk = clock;
	dffe9.clrn = (! aclr);
	dffe9.d = sft45a[2..2].out;
	dffe9.ena = clken;
	sft27a[].in = ( w74w, ( w74w, ( (! data[11..11]), ( data[10..9]))));
	sft28a[].in = ( w74w, ( w74w, ( (! data[8..8]), ( data[7..6]))));
	sft29a[].in = ( w74w, ( w74w, ( (! data[14..14]), ( data[13..12]))));
	sft30a[].in = add26_result[];
	sft32a[].in = ( w74w, ( w74w, ( (! data[17..17]), ( data[16..15]))));
	sft33a[].in = ( w74w, ( w74w, ( (! data[5..5]), ( data[4..3]))));
	sft34a[].in = ( w74w, ( w74w, ( (! data[20..20]), ( data[19..18]))));
	sft35a[].in = add31_result[];
	sft37a[].in = ( w74w, ( (! data[23..23]), ( data[22..21])));
	sft38a[].in = ( w74w, ( (! data[2..2]), ( data[1..0])));
	sft39a[].in = ( w74w, ( w74w, ( w74w, w74w)));
	sft40a[].in = add36_result[];
	sft42a[].in = ( dffe25.q, ( dffe23.q, ( dffe21.q, ( dffe18.q, ( dffe14.q, ( dffe10.q, ( dffe6.q, dffe2.q)))))));
	sft43a[].in = ( w74w, ( w74w, ( w74w, ( dffe19.q, ( dffe15.q, ( dffe11.q, ( dffe7.q, dffe3.q)))))));
	sft44a[].in = ( w74w, ( w74w, ( w74w, ( w74w, ( dffe16.q, ( dffe12.q, ( dffe8.q, dffe4.q)))))));
	sft45a[].in = add41_result[];
	aclr = GND;
	clken = VCC;
	result[5..0] = w150w[5..0];
	w150w[] = ( dffe24.q, dffe22.q, dffe20.q, dffe17.q, dffe13.q, dffe9.q, dffe5.q, dffe1.q);
	w74w = B"0";
END;
--VALID FILE
